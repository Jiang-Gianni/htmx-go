// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql"
	"reflect"
	"testing"
)

func TestNew(t *testing.T) {
	type args struct {
		db DBTX
	}
	tests := []struct {
		name string
		args args
		want *Queries
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if got := New(tt.args.db); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("New(%v) = %v, want %v", tt.args.db, got, tt.want)
			}
		})
	}
}

func TestQueries_WithTx(t *testing.T) {
	type fields struct {
		db DBTX
	}
	type args struct {
		tx *sql.Tx
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *Queries
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			q := &Queries{
				db: tt.fields.db,
			}
			if got := q.WithTx(tt.args.tx); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.WithTx(%v) = %v, want %v", tt.args.tx, got, tt.want)
			}
		})
	}
}
